# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  normal-scan:
    macos:
      xcode: "14.2.0"
    resource_class: macos.x86.medium.gen2
    environment:
      NO_COLOR: TRUE
      JFROG_CLI_LOG_LEVEL: DEBUG
    steps:
      - run:
          name: install cli 
          command: curl -u assafa:${JF_PLATFORM_PASS} -fL https://ecosysjfrog.jfrog.io/artifactory/generic-local/jf -O && chmod +x jf
      - run:
          name: cli config
          command: ./jf config add jfrog-test --url=https://ecosysjfrog.jfrog.io/ --password=${JF_PLATFORM_PASS} --user=assafa --overwrite
      - run:
          name: clone repo
          command: git clone https://github.com/vulnerable-apps/vuln_node_express.git
      - run:
          name: move to repo dir 
          command: cd vuln_node_express
      - run:
          name: audit scan
          command: ./jf audit --format=table
  docker-build:
    machine:
      image: ubuntu-2204:2022.04.2
    environment:
      NO_COLOR: TRUE
      JFROG_CLI_LOG_LEVEL: DEBUG
    steps:
      - run:
          name: install cli 
          command: curl -fL https://getcli.jfrog.io/v2-jf | sh -s 2.31.0 && chmod +x jf
      - run:
          name: cli config
          command: ./jf config add jfrog-test --url=https://ecosysjfrog.jfrog.io/ --password=${JF_PLATFORM_PASS} --user=assafa --overwrite
      - run:
          name: docker pull
          command: docker pull nginx:latest
      - run:
          name: docker scan
          command: ./jf docker scan nginx:latest --format=table

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  sample:
    jobs:
      - normal-scan
